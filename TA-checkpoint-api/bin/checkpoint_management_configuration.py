import ta_checkpoint_api_declare

import os
import sys
import time
import datetime
import json

import modinput_wrapper.base_modinput
from splunklib import modularinput as smi



import input_module_checkpoint_management_configuration as input_module

bin_dir = os.path.basename(__file__)

'''
    Do not edit this file!!!
    This file is generated by Add-on builder automatically.
    Add your modular input logic to file input_module_checkpoint_management_configuration.py
'''
class ModInputcheckpoint_management_configuration(modinput_wrapper.base_modinput.BaseModInput):

    def __init__(self):
        if 'use_single_instance_mode' in dir(input_module):
            use_single_instance = input_module.use_single_instance_mode()
        else:
            use_single_instance = False
        super(ModInputcheckpoint_management_configuration, self).__init__("ta_checkpoint_api", "checkpoint_management_configuration", use_single_instance)
        self.global_checkbox_fields = None

    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = super(ModInputcheckpoint_management_configuration, self).get_scheme()
        scheme.title = ("Checkpoint Management Configuration")
        scheme.description = ("Go to the add-on\'s configuration UI and configure modular inputs under the Inputs menu.")
        scheme.use_external_validation = True
        scheme.streaming_mode_xml = True

        scheme.add_argument(smi.Argument("name", title="Name",
                                         description="",
                                         required_on_create=True))

        """
        For customized inputs, hard code the arguments here to hide argument detail from users.
        For other input types, arguments should be get from input_module. Defining new input types could be easier.
        """
        scheme.add_argument(smi.Argument("instance", title="Instance",
                                         description="Select the instance you want the events from",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("account", title="Account",
                                         description="Enter your Checkpoint account (configured under Account)",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("limit", title="Limit",
                                         description="The maximal number of returned results per request.",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("items", title="Items",
                                         description="Select which configuration you want to recover",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("details_level", title="Details level",
                                         description="The level of detail for some of the fields in the response can vary from showing only the UID value of the object to a fully detailed representation of the object.",
                                         required_on_create=True,
                                         required_on_edit=False))
        scheme.add_argument(smi.Argument("enable_membership_resolution", title="Enable membership resolution",
                                         description="If you want to resolve membership on objects (to which group they are belonging). Be careful that it will take more time to recover objects information. \"Full\" details level must be selected",
                                         required_on_create=True,
                                         required_on_edit=False))
        return scheme

    def get_app_name(self):
        return "TA-checkpoint-api"

    def validate_input(self, definition):
        """validate the input stanza"""
        input_module.validate_input(self, definition)

    def collect_events(self, ew):
        """write out the events"""
        input_module.collect_events(self, ew)

    def get_account_fields(self):
        account_fields = []
        account_fields.append("account")
        return account_fields

    def get_checkbox_fields(self):
        checkbox_fields = []
        return checkbox_fields

    def get_global_checkbox_fields(self):
        if self.global_checkbox_fields is None:
            checkbox_name_file = os.path.join(bin_dir, 'global_checkbox_param.json')
            try:
                if os.path.isfile(checkbox_name_file):
                    with open(checkbox_name_file, 'r') as fp:
                        self.global_checkbox_fields = json.load(fp)
                else:
                    self.global_checkbox_fields = []
            except Exception as e:
                self.log_error('Get exception when loading global checkbox parameter names. ' + str(e))
                self.global_checkbox_fields = []
        return self.global_checkbox_fields

if __name__ == "__main__":
    exitcode = ModInputcheckpoint_management_configuration().run(sys.argv)
    sys.exit(exitcode)
