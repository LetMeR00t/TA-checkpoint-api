{"alert_action_builder": {"modular_alerts": [{"description": "This alert action is used to interact with network objects (add/delete). You can add them to existing groups if needed", "largeIcon": "", "smallIcon": "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", "label": "Checkpoint API: Perform an action on network objects", "short_name": "checkpoint_api_perform_an_action_on_network_objects", "parameters": [{"format_type": "text", "required": true, "name": "instances", "label": "Instances", "default_value": "1", "help_string": "Indicate which instances you want to perform the action (it has to be only one number identifying the instance or a list separated by a comma)", "type": "", "value": "1"}, {"format_type": "text", "required": true, "name": "account_usernames", "label": "Account usernames", "default_value": "{\"1\": \"MY_USERNAME\"}", "help_string": "Specify the name of the account you want to use (username) for each instance as a dictionnary", "type": "", "value": "{\"1\": \"MY_USERNAME\"}"}, {"format_type": "radio", "required": true, "name": "action", "label": "Action", "default_value": "add", "help_string": "Indicates which action you want to execute based on the search results.", "possible_values": {"Add": "add", "Delete": "delete"}, "type": "", "value": "add"}, {"format_type": "text", "required": true, "name": "name_template", "label": "Name template", "default_value": "{name}_{ip_address}", "help_string": "Indicate the template name (format string in python) to use for any object creation (used only by \"Add\"). If empty, the name of the search results will be used.", "type": "", "value": "{name}_{ip_address}"}, {"format_type": "radio", "required": true, "name": "automatic_publish_and_install", "label": "Automatic publish and install", "default_value": "execute_discard", "help_string": "If you want to automatically publish your changes after pushing the new objects", "possible_values": {"Execute and discard (tests only)": "execute_discard", "Execute only (no publish, no install)": "execute", "Execute/Publish only (no install)": "publish", "Execute/Publish/Install": "publish_install"}, "type": "", "value": "none"}], "code": "import json\nimport inspect\nimport sys\nimport time\n\n# Import custom librairies\nfrom pycheckpoint_api import Management\nfrom pycheckpoint_api.models import Color\nfrom pycheckpoint_api.management.exception import MandatoryFieldMissing, WrongType\nimport restfly\n\n# Optional arguments\nOPT_ARGS = {\n    \"add\": [\n        {\"name\": \"set_if_exists\", \"annotation\": bool, \"accepted_values\": [True, False]},\n        {\"name\": \"color\", \"annotation\": str},\n        {\"name\": \"comments\", \"annotation\": str},\n        {\"name\": \"details_level\", \"annotation\": str},\n        {\"name\": \"groups\", \"annotation\": list},\n        {\"name\": \"ignore_warnings\", \"annotation\": str},\n        {\"name\": \"ignore_errors\", \"annotation\": bool, \"accepted_values\": [True, False]},\n    ],\n    \"delete\": [\n        {\"name\": \"details_level\", \"annotation\": str},\n        {\"name\": \"groups\", \"annotation\": list},\n        {\"name\": \"ignore_warnings\", \"annotation\": str},\n        {\"name\": \"ignore_errors\", \"annotation\": bool, \"accepted_values\": [True, False]},\n    ],\n}\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example gets the setup parameters and prints them to the log\n    instance_1_hostname = helper.get_global_setting(\"instance_1_hostname\")\n    helper.log_info(\"instance_1_hostname={}\".format(instance_1_hostname))\n    instance_1_port = helper.get_global_setting(\"instance_1_port\")\n    helper.log_info(\"instance_1_port={}\".format(instance_1_port))\n    instance_1_api_version = helper.get_global_setting(\"instance_1_api_version\")\n    helper.log_info(\"instance_1_api_version={}\".format(instance_1_api_version))\n    instance_1_domains = helper.get_global_setting(\"instance_1_domains\")\n    helper.log_info(\"instance_1_domains={}\".format(instance_1_domains))\n    instance_1_whitelist_policies = helper.get_global_setting(\"instance_1_whitelist_policies\")\n    helper.log_info(\"instance_1_whitelist_policies={}\".format(instance_1_whitelist_policies))\n    instance_1_ssl_verify = helper.get_global_setting(\"instance_1_ssl_verify\")\n    helper.log_info(\"instance_1_ssl_verify={}\".format(instance_1_ssl_verify))\n    instance_2_hostname = helper.get_global_setting(\"instance_2_hostname\")\n    helper.log_info(\"instance_2_hostname={}\".format(instance_2_hostname))\n    instance_2_port = helper.get_global_setting(\"instance_2_port\")\n    helper.log_info(\"instance_2_port={}\".format(instance_2_port))\n    instance_2_api_version = helper.get_global_setting(\"instance_2_api_version\")\n    helper.log_info(\"instance_2_api_version={}\".format(instance_2_api_version))\n    instance_2_domains = helper.get_global_setting(\"instance_2_domains\")\n    helper.log_info(\"instance_2_domains={}\".format(instance_2_domains))\n    instance_2_whitelist_policies = helper.get_global_setting(\"instance_2_whitelist_policies\")\n    helper.log_info(\"instance_2_whitelist_policies={}\".format(instance_2_whitelist_policies))\n    instance_2_ssl_verify = helper.get_global_setting(\"instance_2_ssl_verify\")\n    helper.log_info(\"instance_2_ssl_verify={}\".format(instance_2_ssl_verify))\n    instance_3_hostname = helper.get_global_setting(\"instance_3_hostname\")\n    helper.log_info(\"instance_3_hostname={}\".format(instance_3_hostname))\n    instance_3_port = helper.get_global_setting(\"instance_3_port\")\n    helper.log_info(\"instance_3_port={}\".format(instance_3_port))\n    instance_3_api_version = helper.get_global_setting(\"instance_3_api_version\")\n    helper.log_info(\"instance_3_api_version={}\".format(instance_3_api_version))\n    instance_3_domains = helper.get_global_setting(\"instance_3_domains\")\n    helper.log_info(\"instance_3_domains={}\".format(instance_3_domains))\n    instance_3_whitelist_policies = helper.get_global_setting(\"instance_3_whitelist_policies\")\n    helper.log_info(\"instance_3_whitelist_policies={}\".format(instance_3_whitelist_policies))\n    instance_3_ssl_verify = helper.get_global_setting(\"instance_3_ssl_verify\")\n    helper.log_info(\"instance_3_ssl_verify={}\".format(instance_3_ssl_verify))\n\n    # The following example gets the alert action parameters and prints them to the log\n    instances = helper.get_param(\"instances\")\n    helper.log_info(\"instances={}\".format(instances))\n\n    account_usernames = helper.get_param(\"account_usernames\")\n    helper.log_info(\"account_usernames={}\".format(account_usernames))\n\n    action = helper.get_param(\"action\")\n    helper.log_info(\"action={}\".format(action))\n\n    name_template = helper.get_param(\"name_template\")\n    helper.log_info(\"name_template={}\".format(name_template))\n\n    automatic_publish_and_install = helper.get_param(\"automatic_publish_and_install\")\n    helper.log_info(\"automatic_publish_and_install={}\".format(automatic_publish_and_install))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    # Get all instances concerned for this action\n    instances = [\n        str(i) for i in helper.get_param(\"instances\").replace(\" \", \"\").split(\",\")\n    ]\n\n    # Get all parameters from the action\n    opt_account_usernames = json.loads(helper.get_param(\"account_usernames\"))\n    opt_action = helper.get_param(\"action\")\n    opt_name_template = helper.get_param(\"name_template\")\n    opt_enable_membership_resolution = helper.get_param(\"enable_membership_resolution\")\n    opt_automatic_publish_and_install = helper.get_param(\n        \"automatic_publish_and_install\"\n    )\n\n    # Execute the action on each instance\n    for instance in instances:\n\n        # Get the client credentials for the current instance. If none, raise an issue\n        client = helper.get_user_credential(opt_account_usernames[instance])\n        if client is None:\n            helper.log_error(\n                \"[CKPT-E-AUTH-ACCOUNT] Account can't be found. Did you configured the account under Configuration ? Did you mentionned the account username to use when raising this action ?\"\n            )\n            sys.exit(1)\n        helper.log_debug(\n            '[CKPT-D-AUTH] Authentication will be done using the account \"'\n            + str(client[\"username\"])\n            + '\"'\n        )\n\n        # Get all information relative to the instance from the global configuration\n        hostname = helper.get_global_setting(\"instance_\" + str(instance) + \"_hostname\")\n        if hostname is None or hostname == \"\":\n            helper.log_error(\n                \"[CKPT-E-HOSTNAME_NULL] No hostname was provided for instance n\u00c2\u00b0\"\n                + str(instance)\n                + \", check your configuration\"\n            )\n            sys.exit(1)\n\n        port = helper.get_global_setting(\"instance_\" + str(instance) + \"_port\")\n        if port is None or port == \"\":\n            helper.log_error(\n                \"[CKPT-E-PORT_NULL] No port was provided for instance n\u00c2\u00b0\"\n                + str(instance)\n                + \", check your configuration\"\n            )\n            sys.exit(1)\n\n        api_version = helper.get_global_setting(\n            \"instance_\" + str(instance) + \"_api_version\"\n        )\n        if api_version is None or api_version == \"\":\n            helper.log_error(\n                \"[CKPT-E-API_VERSION_NULL] No API Version was provided for instance n\u00b0\"\n                + str(instance)\n                + \", check your configuration\"\n            )\n            sys.exit(1)\n\n        # Get all domains impacted\n        domains = helper.get_global_setting(\"instance_\" + str(instance) + \"_domains\")\n        if domains is not None:\n            domains = domains.replace(\" \", \"\").split(\",\")\n        else:\n            # If no domain, we have an empty array\n            domains = [\"\"]\n\n        # Get all whitelisted policies\n        whitelisted_policies = helper.get_global_setting(\n            \"instance_\" + str(instance) + \"_whitelist_policies\"\n        )\n        if whitelisted_policies is None or whitelisted_policies == \"\":\n            # If no whitelist is provided, keep it as none\n            whitelisted_policies = None\n        else:\n            whitelisted_policies = whitelisted_policies.replace(\" \", \"\").split(\",\")\n\n        # Check if we need to verify the certificate validity or not\n        ssl_verify = (\n            True\n            if helper.get_global_setting(\"instance_\" + str(instance) + \"_ssl_verify\")\n            == 1\n            else False\n        )\n\n        # Execute the action on each domain of the instance\n        for domain in domains:\n\n            # Get events\n            events = helper.get_events()\n\n            # Instanciate the Checkpoint object with given inputs\n            with Management(\n                hostname=hostname,\n                port=int(port),\n                user=client[\"username\"],\n                password=client[\"password\"],\n                version=api_version,\n                domain=domain,\n                ssl_verify=ssl_verify,\n            ) as firewall:\n                helper.log_debug(\n                    \"[CKPT-D-CKPT_OBJECT] Checkpoint Management connection object is created successfully\"\n                )\n                # From now, we have a valid connection to the firewall\n                # For each event, we process the results\n                for event in events:\n                    # Try to determine the type of the object. We need a valid/known type from the library\n                    if \"type\" in event:\n                        if event[\"type\"] in dir(firewall.network_objects):\n                            if opt_name_template is not None or opt_name_template != \"\":\n                                # Change the name with the template\n                                event[\"name\"] = opt_name_template.format(**event)\n\n                            # From the type, we deduce the function \"add\" to call from all network objects\n                            func = getattr(\n                                getattr(\n                                    firewall.network_objects,\n                                    event[\"type\"].replace(\"-\", \"_\"),\n                                ),\n                                opt_action,\n                            )\n                            # Validate the function with the event\n                            params = validate_function(helper, func, event)\n\n                            # Sanitize some parameters if needed\n                            if \"color\" in params:\n                                params[\"color\"] = Color(params[\"color\"])\n\n                            helper.log_debug(\n                                \"Call function: \"\n                                + str(func)\n                                + \" with sanitized parameters: \"\n                                + str(params)\n                            )\n\n                            # Execute the action (call the function)\n                            resp = None\n                            try:\n\n                                resp = func(**params)\n                                helper.log_info(\n                                    \"[CKPT-I-REQUEST_SUCCESS] \ud83d\udfe2 Request for object name '\"\n                                    + str(params[\"name\"])\n                                    + \"' was successful\"\n                                )\n\n                            except (MandatoryFieldMissing, WrongType) as e:\n                                helper.log_error(\n                                    \"[CKPT-E-LIBRARY_ERROR] \ud83d\udd34 Your request raised an issue: \"\n                                    + str(e)\n                                )\n                            except restfly.errors.BadRequestError as e:\n                                helper.log_error(\n                                    \"[CKPT-E-BAD_REQUEST] \ud83d\udd34 Your request is not correct and was rejected by Checkpoint: \"\n                                    + str(e.msg.replace('\"', \"'\"))\n                                )\n                            except Exception as e:\n                                helper.log_error(\n                                    \"[CKPT-E-GENERIC_EXCEPTION] \ud83d\udd34 \"\n                                    + str(e.msg.replace('\"', \"'\"))\n                                )\n\n                            helper.log_debug(\n                                \"Response from Checkpoint Manager: \" + str(resp)\n                            )\n\n                        else:\n                            helper.log_error(\n                                \"[CKPT-E-WRONG_TYPE] \ud83d\udd34 You didn't provided  a valid type for the object (type is '\"\n                                + event[\"type\"]\n                                + \"'). Please refer to the documentation\"\n                            )\n                    else:\n                        helper.log_error(\n                            \"[CKPT-E-NO_TYPE] \ud83d\udd34 You didn't provided any type for the object. Field 'type' is null\"\n                        )\n\n                helper.log_info(\"[CKPT-I-ACTION] Chosen action is: \"+opt_automatic_publish_and_install)\n\n                # If execute and discard is selected, it means that we just want to test the API results, so we drop\n                # all the changes\n                if opt_automatic_publish_and_install == \"execute_discard\":\n                    helper.log_info(\"[CKPT-I-ACTION_DISCARD] Discard is requested\")\n                    firewall.session.discard()\n\n                # If automatic publish is selected, then publish\n                if opt_automatic_publish_and_install in [\"publish\", \"publish_install\"]:\n                    # Automatic publish is enabled so we publish the changes\n                    helper.log_info(\"[CKPT-I-ACTION_PUBLISH] Publish is requested\")\n                    firewall.session.publish()\n\n                # Wait 2 seconds\n                time.sleep(2)\n\n                if opt_automatic_publish_and_install == \"publish_install\":\n                    # Automatic install after publish\n                    helper.log_info(\"[CKPT-I-ACTION_INSTALL] Install is requested\")\n                    # Get packages\n                    packages = firewall.policy.package.show_packages(\n                        details_level=\"full\"\n                    ).packages\n                    # For each package, install the policy\n                    for p in packages:\n                        if (\n                            whitelisted_policies is None\n                            or p.name in whitelisted_policies\n                        ):\n                            targets = [t.name for t in p.installation_targets]\n                            helper.log_info(targets)\n                            resp = firewall.policy.install_policy(\n                                policy_package=p.uid, targets=targets\n                            )\n\n    return 0\n\n\n# This function is used to validate inputs for the given function\n# It's returning the dictionary with all parameters\ndef validate_function(helper, func, event):\n\n    # Log on which event we are working on\n    helper.log_debug(\n        \"[CKPT-D-FUNC] Validating following event for the function (\"\n        + func.__name__\n        + \"): \"\n        + str(event)\n    )\n\n    # Prepare final dictionnary\n    params = {}\n\n    helper.log_debug(\n        \"[CKPT-D-VALID1] (#1) Validating parameters from function signature\"\n    )\n    # /1 Check all parameters from the function signature\n    signature = inspect.signature(func)\n    for sig_name, sig_values in signature.parameters.items():\n        # Remove false positives:\n        if sig_name not in [\"kwargs\", \"kw\"]:\n            param = process_param(\n                helper, event, sig_name, sig_values.annotation, sig_values.default\n            )\n            params[sig_name] = param\n\n    helper.log_debug(\n        \"[CKPT-D-VALID2] (#2) Validating parameters for optional arguments\"\n    )\n    # /2 Check all optional parameters for the given function\n    if func.__name__ in OPT_ARGS:\n        opt_args = OPT_ARGS[func.__name__]\n        for arg in opt_args:\n            param = process_param(helper, event, arg[\"name\"], arg[\"annotation\"], None)\n            if \"accepted_values\" in arg:\n                if param not in arg[\"accepted_values\"] and param is not None:\n                    helper.log_error(\n                        \"[CKPT-E-ACCEPTED_VALUES] Provided value (\"\n                        + str(param)\n                        + \") for the parameter (\"\n                        + arg[\"name\"]\n                        + \" is not accepted as it's expected only one of these values: \"\n                        + str(arg[\"accepted_values\"])\n                        + \". Please refer to the original python library code to verify which fields are expected\"\n                    )\n                    sys.exit(1)\n                elif param is not None:\n                    params[arg[\"name\"]] = param\n                else:\n                    helper.log_debug(\n                        \"[CKPT-D-OPTIONAL_ARG_NONE] Optional argument \"\n                        + arg[\"name\"]\n                        + \" will not be added in the payload as it's value is None\"\n                    )\n            else:\n                if param is not None:\n                    params[arg[\"name\"]] = param\n\n    helper.log_debug(\"[CKPT-D-FINAL_PARAMS] Params built from event: \" + str(params))\n    return params\n\n\n# This function is used to get the final value and validate the type\ndef process_param(helper, event, sig_name, sig_annotation, sig_default):\n\n    helper.log_debug(\n        \"[CKPT-D-PROCESS_PARAMS_INPUT] Processing parameter with following inputs: event=\"\n        + str(event)\n        + \", sig_name=\"\n        + str(sig_name)\n        + \", sig_annotation=\"\n        + str(sig_annotation)\n        + \", sig_default=\"\n        + str(sig_default)\n    )\n\n    # Default is None\n    value = None\n    try:\n        value = event[sig_name]\n    except KeyError as e:\n        if sig_default is inspect._empty:\n            helper.log_error(\n                \"[CKPT-E-FIELD_NOT_PRESENT] An expected field (\"\n                + sig_name\n                + \") is not present in the event (and no default value was found). Please refer to the original python library code to verify which fields are expected\"\n            )\n            sys.exit(1)\n        else:\n            helper.log_debug(\n                \"[CKPT-D-FIELD_NOT_PRESENT_DEFAULT] An expected field (\"\n                + sig_name\n                + \") is not present but a default value will be used: \"\n                + str(value)\n                + \". Please refer to the original python library code to verify which fields are expected\"\n            )\n            value = sig_default\n    helper.log_debug(\n        \"[CKPT-D-TYPE_PROCESSING] Type for \"\n        + sig_name\n        + \" need to be \"\n        + str(sig_annotation)\n        + \", processing it...\"\n    )\n    # Avoid adding none values\n    if value is not None:\n        # Process data with the expected type\n        if sig_annotation is int:\n            value = int(value)\n        elif sig_annotation is str:\n            value = str(value)\n        elif sig_annotation is list:\n            value = value.replace(\", \", \",\").split(\",\")\n        elif sig_annotation is bool:\n            if value in [\"0\", \"false\"]:\n                value = False\n            else:\n                value = True\n        elif sig_annotation is inspect._empty:\n            helper.log_error(\n                \"[CKPT-E-EMPTY-TYPE] This error should come from the pycheckpoint_api library on which a field has no type defined. Please check this information for the field '\"\n                + str(sig_name)\n                + \"'\"\n            )\n            sys.exit(1)\n        else:\n            helper.log_error(\n                \"[CKPT-E-UNSUPPORTED_TYPE] Unsupported type for parameter: \"\n                + str(sig_annotation)\n            )\n            sys.exit(1)\n    return value\n", "uuid": "1b4caf18efba451c853127e1800ec146"}]}, "basic_builder": {"appname": "TA-checkpoint-api", "friendly_name": "Checkpoint API", "version": "1.1.13", "author": "Alexandre Demeyer", "description": "This TA is used to interact with the Checkpoint API using Splunk", "theme": "#DB176A", "large_icon": "", "small_icon": "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", "visible": true, "tab_version": "4.1.1", "tab_build_no": "0", "build_no": 25}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "checkpoint:management:api", "interval": "86400", "use_external_validation": true, "streaming_mode_xml": true, "name": "checkpoint_management_configuration", "title": "Checkpoint Management Configuration", "description": "This input is used to recover periodically some data regarding the current Checkpoint Management configuration in a dedicated sourcetype", "type": "customized", "parameters": [{"name": "instance", "label": "Instance", "help_string": "Select the instance you want the events from", "required": true, "possible_values": [{"value": "1", "label": "Instance 1"}, {"value": "2", "label": "Instance 2"}, {"value": "3", "label": "Instance 3"}], "format_type": "dropdownlist", "default_value": "", "placeholder": "", "type": "dropdownlist", "value": ""}, {"name": "account", "label": "Account", "help_string": "Enter your Checkpoint account (configured under Account)", "required": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": "", "type": "global_account", "value": ""}, {"name": "limit", "label": "Limit", "help_string": "The maximal number of returned results per request.", "required": true, "format_type": "text", "default_value": "50", "placeholder": "", "type": "text", "value": "50"}, {"name": "items", "label": "Items", "help_string": "Select which configuration you want to recover", "required": true, "possible_values": [{"value": "host", "label": "Network Objects: Hosts"}, {"value": "network", "label": "Network Objects: Networks"}, {"value": "wildcard", "label": "Network Objects: Wildcards"}, {"label": "Network Objects: Groups", "value": "group"}, {"label": "Network Objects: GSN Handover Group", "value": "gsn-handover-group"}, {"label": "Network Objects: Address Range", "value": "address-range"}, {"label": "Network Objects: Multicast Address Range", "value": "multicast-address-range"}, {"label": "Network Objects: Group with exclusion", "value": "group-with-exclusion"}, {"label": "Network Objects: Simple Gateway", "value": "simple-gateway"}, {"label": "Network Objects: Simple Cluster", "value": "simple-cluster"}, {"label": "Network Objects: CheckPoint Host", "value": "checkpoint-host"}, {"label": "Network Objects: Security Zone", "value": "security-zone"}, {"label": "Network Objects: Time", "value": "time"}, {"label": "Network Objects: Time Group", "value": "time-group"}, {"label": "Network Objects: Dynamic Objects", "value": "dynamic-object"}, {"label": "Network Objects: Tags", "value": "tag"}, {"label": "Network Objects: DNS Domain", "value": "dns-domain"}, {"label": "Network Objects: OPSEC Applications", "value": "opsec-application"}, {"label": "Network Objects: LSV Profile", "value": "lsv-profile"}, {"label": "Network Objects: TACACS Servers", "value": "tacacs-server"}, {"label": "Network Objects: TACACS Group", "value": "tacacs-group"}, {"label": "Network Objects: Access Point Name", "value": "access-point-name"}, {"label": "Network Objects: LSM Gateways", "value": "lsm-gateway"}, {"label": "Network Objects: LSM Clusters", "value": "lsm-cluster"}, {"label": "Service & Applications: Service TCP", "value": "service-tcp"}, {"label": "Service & Applications: Service UDP", "value": "service-udp"}, {"label": "Service & Applications: Service ICMP", "value": "service-icmp"}, {"label": "Service & Applications: Service ICMP6", "value": "service-icmp6"}, {"label": "Service & Applications: Service SCTP", "value": "service-sctp"}, {"label": "Service & Applications: Service Other", "value": "service-other"}, {"label": "Service & Applications: Service Group", "value": "service-group"}, {"label": "Service & Applications: Application", "value": "application-site"}, {"label": "Service & Applications: Application Categories", "value": "application-site-category"}, {"label": "Service & Applications: Application Groups", "value": "application-site-group"}, {"label": "Service & Applications: Service DCE-RPC", "value": "service-dce-rpc"}, {"label": "Service & Applications: Service RPC", "value": "service-rpc"}, {"label": "Service & Applications: Service GTP", "value": "service-gtp"}, {"label": "Service & Applications: Service Citrix TCP", "value": "service-citrix-tcp"}, {"label": "Service & Applications: Service Compound TCP", "value": "service-compound-tcp"}, {"label": "Access Control & NAT: Access Rules", "value": "access-rule"}, {"label": "Access Control & NAT: NAT Rules", "value": "nat-rule"}, {"label": "MISC: Generic objects", "value": "generic-objects"}, {"label": "Policy: Policy packages", "value": "package"}], "format_type": "multi_dropdownlist", "default_value": [], "placeholder": "", "type": "multi_dropdownlist", "value": []}, {"name": "details_level", "label": "Details level", "help_string": "The level of detail for some of the fields in the response can vary from showing only the UID value of the object to a fully detailed representation of the object.", "required": true, "possible_values": [{"value": "uid", "label": "UID"}, {"value": "standard", "label": "Standard"}, {"value": "full", "label": "Full"}], "format_type": "radiogroup", "default_value": "standard", "type": "radiogroup", "value": "standard"}, {"name": "enable_membership_resolution", "label": "Enable membership resolution", "help_string": "If you want to resolve membership on objects (to which group they are belonging). Be careful that it will take more time to recover objects information. \"Full\" details level must be selected", "required": true, "possible_values": [{"value": "0", "label": "No"}, {"value": "1", "label": "Yes"}], "format_type": "radiogroup", "default_value": "0", "type": "radiogroup", "value": "0"}], "data_inputs_options": [{"type": "customized_var", "name": "instance", "title": "Instance", "description": "Select the instance you want the events from", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "1", "label": "Instance 1"}, {"value": "2", "label": "Instance 2"}, {"value": "3", "label": "Instance 3"}], "format_type": "dropdownlist", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "account", "title": "Account", "description": "Enter your Checkpoint account (configured under Account)", "required_on_edit": false, "required_on_create": true, "possible_values": [], "format_type": "global_account", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "limit", "title": "Limit", "description": "The maximal number of returned results per request.", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "50", "placeholder": ""}, {"type": "customized_var", "name": "items", "title": "Items", "description": "Select which configuration you want to recover", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "host", "label": "Network Objects: Hosts"}, {"value": "network", "label": "Network Objects: Networks"}, {"value": "wildcard", "label": "Network Objects: Wildcards"}, {"label": "Network Objects: Groups", "value": "group"}, {"label": "Network Objects: GSN Handover Group", "value": "gsn-handover-group"}, {"label": "Network Objects: Address Range", "value": "address-range"}, {"label": "Network Objects: Multicast Address Range", "value": "multicast-address-range"}, {"label": "Network Objects: Group with exclusion", "value": "group-with-exclusion"}, {"label": "Network Objects: Simple Gateway", "value": "simple-gateway"}, {"label": "Network Objects: Simple Cluster", "value": "simple-cluster"}, {"label": "Network Objects: CheckPoint Host", "value": "checkpoint-host"}, {"label": "Network Objects: Security Zone", "value": "security-zone"}, {"label": "Network Objects: Time", "value": "time"}, {"label": "Network Objects: Time Group", "value": "time-group"}, {"label": "Network Objects: Dynamic Objects", "value": "dynamic-object"}, {"label": "Network Objects: Tags", "value": "tag"}, {"label": "Network Objects: DNS Domain", "value": "dns-domain"}, {"label": "Network Objects: OPSEC Applications", "value": "opsec-application"}, {"label": "Network Objects: LSV Profile", "value": "lsv-profile"}, {"label": "Network Objects: TACACS Servers", "value": "tacacs-server"}, {"label": "Network Objects: TACACS Group", "value": "tacacs-group"}, {"label": "Network Objects: Access Point Name", "value": "access-point-name"}, {"label": "Network Objects: LSM Gateways", "value": "lsm-gateway"}, {"label": "Network Objects: LSM Clusters", "value": "lsm-cluster"}, {"label": "Service & Applications: Service TCP", "value": "service-tcp"}, {"label": "Service & Applications: Service UDP", "value": "service-udp"}, {"label": "Service & Applications: Service ICMP", "value": "service-icmp"}, {"label": "Service & Applications: Service ICMP6", "value": "service-icmp6"}, {"label": "Service & Applications: Service SCTP", "value": "service-sctp"}, {"label": "Service & Applications: Service Other", "value": "service-other"}, {"label": "Service & Applications: Service Group", "value": "service-group"}, {"label": "Service & Applications: Application", "value": "application-site"}, {"label": "Service & Applications: Application Categories", "value": "application-site-category"}, {"label": "Service & Applications: Application Groups", "value": "application-site-group"}, {"label": "Service & Applications: Service DCE-RPC", "value": "service-dce-rpc"}, {"label": "Service & Applications: Service RPC", "value": "service-rpc"}, {"label": "Service & Applications: Service GTP", "value": "service-gtp"}, {"label": "Service & Applications: Service Citrix TCP", "value": "service-citrix-tcp"}, {"label": "Service & Applications: Service Compound TCP", "value": "service-compound-tcp"}, {"label": "Access Control & NAT: Access Rules", "value": "access-rule"}, {"label": "Access Control & NAT: NAT Rules", "value": "nat-rule"}, {"label": "MISC: Generic objects", "value": "generic-objects"}, {"label": "Policy: Policy packages", "value": "package"}], "format_type": "multi_dropdownlist", "default_value": [], "placeholder": ""}, {"type": "customized_var", "name": "details_level", "title": "Details level", "description": "The level of detail for some of the fields in the response can vary from showing only the UID value of the object to a fully detailed representation of the object.", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "uid", "label": "UID"}, {"value": "standard", "label": "Standard"}, {"value": "full", "label": "Full"}], "format_type": "radiogroup", "default_value": "standard"}, {"type": "customized_var", "name": "enable_membership_resolution", "title": "Enable membership resolution", "description": "If you want to resolve membership on objects (to which group they are belonging). Be careful that it will take more time to recover objects information. \"Full\" details level must be selected", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "0", "label": "No"}, {"value": "1", "label": "Yes"}], "format_type": "radiogroup", "default_value": "0"}], "code": "# encoding = utf-8\n\nimport sys\nimport datetime\nimport json\nimport hashlib\n\n# Import custom librairies\nfrom pycheckpoint_api.management import Management\nfrom pycheckpoint_api.management.exception import MandatoryFieldMissing, WrongType\nimport restfly\n\n# Global\n## Unique ID for the input execution\nINPUT_UID = None\n## Checkpoint instance name configured in the input\nCKPT_INSTANCE = None\n## Checkpoint domain of a given instance\nDOMAIN = None\n\n\"\"\"\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n\"\"\"\n\"\"\"\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n\"\"\"\n\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # instance = definition.parameters.get('instance', None)\n    # account = definition.parameters.get('account', None)\n    # items = definition.parameters.get('items', None)\n    # details_level = definition.parameters.get('details_level', None)\n    pass\n\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here\n\n    # The following examples get the arguments of this input.\n    # Note, for single instance mod input, args will be returned as a dict.\n    # For multi instance mod input, args will be returned as a single value.\n    opt_instance = helper.get_arg('instance')\n    opt_account = helper.get_arg('account')\n    opt_items = helper.get_arg('items')\n    opt_details_level = helper.get_arg('details_level')\n    # In single instance mode, to get arguments of a particular input, use\n    opt_instance = helper.get_arg('instance', stanza_name)\n    opt_account = helper.get_arg('account', stanza_name)\n    opt_items = helper.get_arg('items', stanza_name)\n    opt_details_level = helper.get_arg('details_level', stanza_name)\n\n    # get input type\n    helper.get_input_type()\n\n    # The following examples get input stanzas.\n    # get all detailed input stanzas\n    helper.get_input_stanza()\n    # get specific input stanza with stanza name\n    helper.get_input_stanza(stanza_name)\n    # get all stanza names\n    helper.get_input_stanza_names()\n\n    # The following examples get options from setup page configuration.\n    # get the loglevel from the setup page\n    loglevel = helper.get_log_level()\n    # get proxy setting configuration\n    proxy_settings = helper.get_proxy()\n    # get account credentials as dictionary\n    account = helper.get_user_credential_by_username(\"username\")\n    account = helper.get_user_credential_by_id(\"account id\")\n    # get global variable configuration\n    global_instance_1_hostname = helper.get_global_setting(\"instance_1_hostname\")\n    global_instance_1_port = helper.get_global_setting(\"instance_1_port\")\n    global_instance_1_api_version = helper.get_global_setting(\"instance_1_api_version\")\n    global_instance_1_domains = helper.get_global_setting(\"instance_1_domains\")\n    global_instance_1_ssl_verify = helper.get_global_setting(\"instance_1_ssl_verify\")\n    global_instance_2_hostname = helper.get_global_setting(\"instance_2_hostname\")\n    global_instance_2_port = helper.get_global_setting(\"instance_2_port\")\n    global_instance_2_api_version = helper.get_global_setting(\"instance_2_api_version\")\n    global_instance_2_domains = helper.get_global_setting(\"instance_2_domains\")\n    global_instance_2_ssl_verify = helper.get_global_setting(\"instance_2_ssl_verify\")\n    global_instance_3_hostname = helper.get_global_setting(\"instance_3_hostname\")\n    global_instance_3_port = helper.get_global_setting(\"instance_3_port\")\n    global_instance_3_api_version = helper.get_global_setting(\"instance_3_api_version\")\n    global_instance_3_domains = helper.get_global_setting(\"instance_3_domains\")\n    global_instance_3_ssl_verify = helper.get_global_setting(\"instance_3_ssl_verify\")\n\n    # The following examples show usage of logging related helper functions.\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_debug(\"log message\")\n    helper.log_info(\"log message\")\n    helper.log_warning(\"log message\")\n    helper.log_error(\"log message\")\n    helper.log_critical(\"log message\")\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(log_level)\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=None, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    \"\"\"\n\n    \"\"\"\n    # The following example writes a random number as an event. (Multi Instance Mode)\n    # Use this code template by default.\n    import random\n    data = str(random.randint(0,100))\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n    ew.write_event(event)\n    \"\"\"\n\n    \"\"\"\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\n    # For advanced users, if you want to create single instance mod input, please use this code template.\n    # Also, you need to uncomment use_single_instance_mode() above.\n    import random\n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        data = str(random.randint(0,100))\n        event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\n        ew.write_event(event)\n    \"\"\"\n    helper.log_info(\n        \"[CKPT-I-START-COLLECT] Start to recover configuration events from Checkpoint Management API\"\n    )\n\n    # Reference global variables\n    global INPUT_UID\n    global CKPT_INSTANCE\n    global DOMAIN\n\n    # Calculate a unique ID for the given input event recovery\n    INPUT_UID = hashlib.sha256(str(datetime.datetime.now()).encode()).hexdigest()[:8]\n\n    # Set the Checkpoint instance name\n    CKPT_INSTANCE = list(helper.get_input_stanza().keys())[0]\n\n    # Get information about the Splunk input\n    opt_instance = helper.get_arg(\"instance\")\n    opt_items = helper.get_arg(\"items\")\n    opt_enable_membership_resolution = int(helper.get_arg(\"enable_membership_resolution\"))\n    opt_limit = int(helper.get_arg(\"limit\"))\n    opt_details_level = helper.get_arg(\"details_level\")\n\n    # Get credentials for Checkpoint API\n    account = helper.get_arg(\"account\")\n\n    # Get information relative to the instance to use\n    hostname = helper.get_global_setting(\"instance_\" + str(opt_instance) + \"_hostname\")\n    if hostname is None or hostname == \"\":\n        helper.log_error(\n            \"[CKPT-E-HOSTNAME_NULL] No hostname was provided for instance n\u00c3\u201a\u00c2\u00b0\"\n            + str(opt_instance)\n            + \", check your configuration\"\n        )\n        sys.exit(1)\n\n    port = helper.get_global_setting(\"instance_\" + str(opt_instance) + \"_port\")\n    if port is None or port == \"\":\n        helper.log_error(\n            \"[CKPT-E-PORT_NULL] No port was provided for instance n\u00c3\u201a\u00c2\u00b0\"\n            + str(opt_instance)\n            + \", check your configuration\"\n        )\n        sys.exit(1)\n\n    api_version = helper.get_global_setting(\n        \"instance_\" + str(opt_instance) + \"_api_version\"\n    )\n    if api_version is None or api_version == \"\":\n        helper.log_error(\n            \"[CKPT-E-API_VERSION_NULL] No API Version was provided for instance n\u00c3\u201a\u00c2\u00b0\"\n            + str(opt_instance)\n            + \", check your configuration\"\n        )\n        sys.exit(1)\n\n    # Get all the domains for the given instance\n    domains = helper.get_global_setting(\"instance_\" + str(opt_instance) + \"_domains\")\n    if domains is not None:\n        domains = domains.replace(\" \", \"\").split(\",\")\n    else:\n        domains = [\"\"]\n\n    # Get all whitelisted policies\n    whitelisted_policies = helper.get_global_setting(\n        \"instance_\" + str(opt_instance) + \"_whitelist_policies\"\n    )\n    if whitelisted_policies is None or whitelisted_policies == \"\":\n        # If no whitelist is provided, keep it as none\n        whitelisted_policies = None\n    else:\n        whitelisted_policies = whitelisted_policies.replace(\" \", \"\").split(\",\")\n\n    # Check if we need to verify the certificate or not\n    ssl_verify = (\n        True\n        if helper.get_global_setting(\"instance_\" + str(opt_instance) + \"_ssl_verify\")\n        == 1\n        else False\n    )\n\n    # Global mapping between each item and the corresponding function to use\n    ITEMS_MAP = {\n        \"host\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_hosts\",\n            \"has_membership\": True,\n        },\n        \"network\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_networks\",\n            \"has_membership\": True,\n        },\n        \"wildcard\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_wildcards\",\n            \"has_membership\": False,\n        },\n        \"group\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_groups\",\n            \"has_membership\": True,\n        },\n        \"gsn-handover-group\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_gsn_handover_groups\",\n            \"has_membership\": True,\n        },\n        \"address-range\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_address_ranges\",\n            \"has_membership\": True,\n        },\n        \"multicast-address-range\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_multicast_address_ranges\",\n            \"has_membership\": True,\n        },\n        \"group-with-exclusion\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_groups_with_exclusion\",\n            \"has_membership\": False,\n        },\n        \"simple-gateway\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_simple_gateways\",\n            \"has_membership\": True,\n        },\n        \"simple-cluster\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_simple_clusters\",\n            \"has_membership\": True,\n        },\n        \"checkpoint-host\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_checkpoint_hosts\",\n            \"has_membership\": True,\n        },\n        \"security-zone\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_security_zones\",\n            \"has_membership\": True,\n        },\n        \"time\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_times\",\n            \"has_membership\": False,\n        },\n        \"time-group\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_time_groups\",\n            \"has_membership\": False,\n        },\n        \"dynamic-object\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_dynamic_objects\",\n            \"has_membership\": True,\n        },\n        \"tag\": {\"key\": \"network_objects\", \"func\": \"show_tags\", \"has_membership\": False},\n        \"dns-domain\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_dns_domains\",\n            \"has_membership\": True,\n        },\n        \"opsec-application\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_opsec_applications\",\n            \"has_membership\": True,\n        },\n        \"lsv-profile\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_lsv_profiles\",\n            \"has_membership\": False,\n        },\n        \"tacacs-server\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_tacacs_servers\",\n            \"has_membership\": False,\n        },\n        \"tacacs-group\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_tacacs_groups\",\n            \"has_membership\": False,\n        },\n        \"access-point-name\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_access_point_names\",\n            \"has_membership\": True,\n        },\n        \"lsm-gateway\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_lsm_gateways\",\n            \"has_membership\": True,\n        },\n        \"lsm-cluster\": {\n            \"key\": \"network_objects\",\n            \"func\": \"show_lsm_clusters\",\n            \"has_membership\": True,\n        },\n        \"service-tcp\": {\n            \"key\": \"service_applications\",\n            \"func\": \"show_services_tcp\",\n            \"has_membership\": True,\n        },\n        \"service-udp\": {\n            \"key\": \"service_applications\",\n            \"func\": \"show_services_udp\",\n            \"has_membership\": True,\n        },\n        \"service-icmp\": {\n            \"key\": \"service_applications\",\n            \"func\": \"show_services_icmp\",\n            \"has_membership\": True,\n        },\n        \"service-icmp6\": {\n            \"key\": \"service_applications\",\n            \"func\": \"show_services_icmp6\",\n            \"has_membership\": True,\n        },\n        \"service-sctp\": {\n            \"key\": \"service_applications\",\n            \"func\": \"show_services_sctp\",\n            \"has_membership\": True,\n        },\n        \"service-other\": {\n            \"key\": \"service_applications\",\n            \"func\": \"show_services_other\",\n            \"has_membership\": True,\n        },\n        \"service-group\": {\n            \"key\": \"service_applications\",\n            \"func\": \"show_service_groups\",\n            \"has_membership\": True,\n        },\n        \"application-site\": {\n            \"key\": \"service_applications\",\n            \"func\": \"show_application_sites\",\n            \"has_membership\": True,\n        },\n        \"application-site-category\": {\n            \"key\": \"service_applications\",\n            \"func\": \"show_application_site_categories\",\n            \"has_membership\": False,\n        },\n        \"application-site-group\": {\n            \"key\": \"service_applications\",\n            \"func\": \"show_application_site_groups\",\n            \"has_membership\": False,\n        },\n        \"service-dce-rpc\": {\n            \"key\": \"service_applications\",\n            \"func\": \"show_services_dce_rpc\",\n            \"has_membership\": True,\n        },\n        \"service-rpc\": {\n            \"key\": \"service_applications\",\n            \"func\": \"show_services_rpc\",\n            \"has_membership\": True,\n        },\n        \"service-gtp\": {\n            \"key\": \"service_applications\",\n            \"func\": \"show_services_gtp\",\n            \"has_membership\": True,\n        },\n        \"service-citrix-tcp\": {\n            \"key\": \"service_applications\",\n            \"func\": \"show_services_citrix_tcp\",\n            \"has_membership\": True,\n        },\n        \"service-compound-tcp\": {\n            \"key\": \"service_applications\",\n            \"func\": \"show_services_compound_tcp\",\n            \"has_membership\": True,\n        },\n        \"access-layer\": {\n            \"key\": \"access_control_nat\",\n            \"func\": \"show_access_layers\",\n            \"has_membership\": False,\n        },\n        \"generic-objects\": {\n            \"key\": \"misc\",\n            \"func\": \"get_rulebaseactions\",\n            \"has_membership\": False,\n        },\n        \"package\": {\"key\": \"policy\", \"func\": \"show_packages\", \"has_membership\": False},\n    }\n\n    # Iterate over all the domains\n    for domain in domains:\n        DOMAIN = domain\n        \n        helper.log_info(\n                '[CKPT-I-MANAGEMENT_DOMAIN] Start to process the domain named \"'\n                + domain\n                + '\" (\"'\n                + CKPT_INSTANCE\n                + '\")'\n            )\n            \n        with Management(\n            hostname=hostname,\n            port=int(port),\n            user=account[\"username\"],\n            password=account[\"password\"],\n            version=api_version,\n            domain=domain,\n            ssl_verify=ssl_verify,\n        ) as firewall:\n\n            helper.log_debug(\n                \"[CKPT-D-MANAGEMENT_OBJECT] Checkpoint Manager connection object is created successfully\"\n            )\n            try:\n                # Get items (simple methods)\n                for item in opt_items:\n                    # Check that the selected item is well supported by this script\n                    if item in ITEMS_MAP:\n                        # Get the item type (where the item is the Checkpoint type)\n                        key = ITEMS_MAP[item][\"key\"]\n                        # Get the associated function relative to the item\n                        function = ITEMS_MAP[item][\"func\"]\n                        # Check whether it can have membership (to calculate groups)\n                        has_membership = ITEMS_MAP[item][\"has_membership\"]\n\n                        # Specific process for generic-objects (not referenced in the Checkpoint API officialy)\n                        if item == \"generic-objects\":\n                            # Execute the request to recover the data (no parameter)\n                            all_data = getattr(\n                                getattr(getattr(firewall, key), item.replace(\"-\", \"_\")),\n                                function,\n                            )()\n                        else:\n                            # Execute the request to recover the data (select all objets and with the required details levels)\n                            final_params = {\n                                \"show_all\": True,\n                                \"details_level\": opt_details_level,\n                                \"limit\": opt_limit,\n                            }\n                            if opt_enable_membership_resolution == 1 and has_membership:\n                                final_params[\"show_membership\"] = True\n                            all_data = getattr(\n                                getattr(getattr(firewall, key), item.replace(\"-\", \"_\")),\n                                function,\n                            )(**final_params)\n\n                        # Depending on the server response, we have to select the right key\n                        if (\n                            key in [\"network_objects\", \"service_applications\"]\n                            or item == \"generic-objects\"\n                        ):\n                            all_data = all_data.objects\n                        elif item == \"access-layer\":\n                            all_data = all_data.access_layers\n                        elif item == \"package\":\n                            all_packages = all_data.packages\n                            all_data = []\n                            for p in all_data:\n                                if (\n                                    whitelisted_policies is None\n                                    or p.name in whitelisted_policies\n                                ):\n                                    all_data += [p]\n\n                        # Write those JSON events in Splunk\n                        for data in all_data:\n                            write_to_splunk(helper, ew, key + \":\" + item, data)\n                        log(helper, item, all_data)\n\n                # Specific process for all access-rule\n                item = \"access-rule\"\n                if item in opt_items:\n                    # Get access layers\n                    access_layers = []\n                    # Get all access layers\n                    resp = firewall.access_control_nat.access_layer.show_access_layers(\n                        limit=opt_limit\n                    )\n                    # Keep only domain type of access layers\n                    if resp.total > 0:\n                        als = resp.access_layers\n                        for al in als:\n                            if al.domain.domain_type == \"domain\":\n                                access_layers.append(al)\n                    # For each access layer, get the rules\n                    for al in access_layers:\n                        all_data = firewall.access_control_nat.access_rule.show_access_rulebase(\n                            name=al.name, show_all=True, show_hits=True, limit=opt_limit\n                        )\n                        # Check if a section exists\n                        section = \"\"\n                        for rule in all_data.rulebase:\n                            if rule.type == \"access-section\":\n                                section = rule[\"name\"]\n                                # A section exists\n                                for subrule in rule.rulebase:\n                                    subrule[\"section\"] = section\n                                    write_to_splunk(\n                                        helper,\n                                        ew,\n                                        \"access_control_nat:\"\n                                        + item\n                                        + \":\"\n                                        + al.name\n                                        + \":\"\n                                        + rule.name\n                                        + \":\"\n                                        + subrule.uid,\n                                        subrule,\n                                    )\n                                log(\n                                    helper,\n                                    \"access_control_nat:\"\n                                    + item\n                                    + \":\"\n                                    + al.name\n                                    + \":\"\n                                    + rule.name,\n                                    subrule,\n                                )\n                            else:\n                                # No section, it's a rule\n                                rule[\"section\"] = section\n                                write_to_splunk(\n                                    helper,\n                                    ew,\n                                    \"access_control_nat:\"\n                                    + item\n                                    + \":\"\n                                    + al.name\n                                    + \":\"\n                                    + rule.uid,\n                                    rule,\n                                )\n                                log(\n                                    helper,\n                                    \"access_control_nat:\"\n                                    + item\n                                    + \":\"\n                                    + al.name\n                                    + \":\"\n                                    + rule.uid,\n                                    all_data.rulebase,\n                                )\n\n                # Specific process for all nat-rule\n                item = \"nat-rule\"\n                if item in opt_items:\n                    # Get packages\n                    packages = firewall.policy.package.show_packages(\n                        limit=opt_limit\n                    ).packages\n                    # For each package, get the rules\n                    for p in packages:\n                        if (\n                            whitelisted_policies is None\n                            or p.name in whitelisted_policies\n                        ):\n                            all_data = (\n                                firewall.access_control_nat.nat_rule.show_nat_rulebase(\n                                    package=p.name, show_all=True, limit=opt_limit\n                                )\n                            )\n                            section = \"\"\n                            # Check if a section exists\n                            for rule in all_data.rulebase:\n                                if rule.type == \"nat-section\":\n                                    section = rule[\"name\"]\n                                    # A section exists\n                                    for subrule in rule.rulebase:\n                                        subrule[\"section\"] = section\n                                        write_to_splunk(\n                                            helper,\n                                            ew,\n                                            \"access_control_nat:\"\n                                            + item\n                                            + \":\"\n                                            + p.name\n                                            + \":\"\n                                            + rule.name\n                                            + \":\"\n                                            + subrule.uid,\n                                            subrule,\n                                        )\n                                    log(\n                                        helper,\n                                        \"access_control_nat:\"\n                                        + item\n                                        + \":\"\n                                        + p.name\n                                        + \":\"\n                                        + rule.name,\n                                        subrule,\n                                    )\n                                else:\n                                    # No section, it's a rule\n                                    rule[\"section\"] = section\n                                    write_to_splunk(\n                                        helper,\n                                        ew,\n                                        \"access_control_nat:\"\n                                        + item\n                                        + \":\"\n                                        + p.name\n                                        + \":\"\n                                        + rule.uid,\n                                        rule,\n                                    )\n                                    log(\n                                        helper,\n                                        \"access_control_nat:\"\n                                        + item\n                                        + \":\"\n                                        + p.name\n                                        + \":\"\n                                        + rule.uid,\n                                        all_data.rulebase,\n                                    )\n\n            except (MandatoryFieldMissing, WrongType) as e:\n                helper.log_error(\n                    \"[CKPT-E-LIBRARY_ERROR] \ud83d\udd34 Your request raised an issue: \" + str(e)\n                )\n                sys.exit(14)\n            except restfly.errors.BadRequestError as e:\n                helper.log_error(\n                    \"[CKPT-E-BAD_REQUEST] \ud83d\udd34 Your request is not correct and was rejected by Checkpoint: \"\n                    + str(e.msg.replace('\"', \"'\"))\n                )\n                sys.exit(15)\n            except restfly.errors.ForbiddenError as e:\n                helper.log_error(\n                    \"[CKPT-E-FORBIDDEN_REQUEST] \ud83d\udd34 Your request is forbidden and was rejected by Checkpoint: \"\n                    + str(e.msg.replace('\"', \"'\"))\n                )\n                sys.exit(16)\n\n    helper.log_info(\n        \"[CKPT-I-END-COLLECT] \ud83d\udfe2 Events from Checkpoint API (\"\n        + str(opt_items)\n        + \") are recovered\"\n    )\n\n\n# This function is writing events in Splunk\ndef write_to_splunk(helper, ew, item, data):\n    event = helper.new_event(\n        source=\"CKPT:\" + CKPT_INSTANCE + \":\" + INPUT_UID + \":\" + DOMAIN + \":\" + item,\n        index=helper.get_output_index(),\n        sourcetype=helper.get_sourcetype(),\n        data=json.dumps(data),\n    )\n    ew.write_event(event)\n\n\n# This function is logging information in the search.log\ndef log(helper, item, all_data):\n    if len(all_data) > 0 and all_data != []:\n        helper.log_debug(\n            \"[CKPT-D-EVENTS_WRITTEN] Events are written for \"\n            + item\n            + \" to the index \"\n            + helper.get_output_index()\n            + \": \"\n            + str(all_data)\n        )\n    else:\n        helper.log_debug(\"[CKPT-D-NO_EVENT_FOUND] No event found for \" + item)\n", "customized_options": [{"name": "instance", "value": ""}, {"name": "account", "value": ""}, {"name": "limit", "value": "50"}, {"name": "items", "value": []}, {"name": "details_level", "value": "standard"}, {"name": "enable_membership_resolution", "value": "0"}], "uuid": "4f0478e0fa42460a9c455430363ed274", "sample_count": 0}]}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "credential_settings": [], "customized_settings": [{"required": true, "name": "instance_1_hostname", "label": "Instance 1: Hostname", "default_value": "", "placeholder": "", "help_string": "Enter your Checkpoint hostname for the instance 1", "type": "text", "format_type": "text", "value": ""}, {"required": true, "name": "instance_1_port", "label": "Instance 1: Port", "default_value": "443", "placeholder": "", "help_string": "Enter your Checkpoint port for the instance 1", "type": "text", "format_type": "text", "value": "443"}, {"required": true, "name": "instance_1_api_version", "label": "Instance 1: API Version", "default_value": "1.8", "placeholder": "", "help_string": "Enter your Checkpoint API version to use for the instance 1. Available values are: 1, 1.1 ,1.2, 1.3, 1.4, 1.5, 1.6, 1.6.1, 1.7, 1.7.1, 1.8", "type": "text", "format_type": "text", "value": "1.8"}, {"required": false, "name": "instance_1_domains", "label": "Instance 1: Domains", "default_value": "", "placeholder": "", "help_string": "Enter your Checkpoint domains for the instance 1. You can specify several domains separated by a comma (,). Leave a blank if you don't have several domains.", "type": "text", "format_type": "text", "value": ""}, {"format_type": "text", "required": false, "name": "instance_1_whitelist_policies", "label": "Instance 1: Whitelist policies", "default_value": "", "help_string": "Indicates which policies, separated by a comma, are allowed to be accessed/changed. Other policies will not be impacted by changes", "internal_name": "", "type": "text", "value": ""}, {"required": false, "name": "instance_1_ssl_verify", "label": "Instance 1: SSL Verify", "default_value": true, "help_string": "Indicates if you want to verify the certificate validity for HTTPS. By default, it's set to True (certificate validation is enforced)", "type": "checkbox", "format_type": "checkbox", "value": true}, {"required": false, "name": "instance_2_hostname", "label": "Instance 2: Hostname", "default_value": "", "placeholder": "", "help_string": "Enter your Checkpoint hostname for the instance 2", "type": "text", "format_type": "text", "value": ""}, {"required": false, "name": "instance_2_port", "label": "Instance 2: Port", "default_value": "", "placeholder": "", "help_string": "Enter your Checkpoint port for the instance 2", "type": "text", "format_type": "text", "value": ""}, {"required": false, "name": "instance_2_api_version", "label": "Instance 2: API Version", "default_value": "", "placeholder": "", "help_string": "Enter your Checkpoint API version to use for the instance 2. Available values are: 1, 1.1 ,1.2, 1.3, 1.4, 1.5, 1.6, 1.6.1, 1.7, 1.7.1, 1.8", "type": "text", "format_type": "text", "value": ""}, {"required": false, "name": "instance_2_domains", "label": "Instance 2: Domains", "default_value": "", "placeholder": "", "help_string": "Enter your Checkpoint domains for the instance 2. You can specify several domains separated by a comma (,). Leave a blank if you don't have several domains.", "type": "text", "format_type": "text", "value": ""}, {"format_type": "text", "required": false, "name": "instance_2_whitelist_policies", "label": "Instance 2: Whitelist policies", "default_value": "", "help_string": "Indicates which policies, separated by a comma, are allowed to be accessed/changed. Other policies will not be impacted by changes", "internal_name": "", "type": "text", "value": ""}, {"required": false, "name": "instance_2_ssl_verify", "label": "Instance 2: SSL Verify", "default_value": true, "help_string": "Indicates if you want to verify the certificate validity for HTTPS. By default, it's set to True (certificate validation is enforced)", "type": "checkbox", "format_type": "checkbox", "value": true}, {"required": false, "name": "instance_3_hostname", "label": "Instance 3: Hostname", "default_value": "", "placeholder": "", "help_string": "Enter your Checkpoint hostname for the instance 3", "type": "text", "format_type": "text", "value": ""}, {"required": false, "name": "instance_3_port", "label": "Instance 3: Port", "default_value": "", "placeholder": "", "help_string": "Enter your Checkpoint port for the instance 3", "type": "text", "format_type": "text", "value": ""}, {"required": false, "name": "instance_3_api_version", "label": "Instance 3: API Version", "default_value": "", "placeholder": "", "help_string": "Enter your Checkpoint API version to use for the instance 3. Available values are: 1, 1.1 ,1.2, 1.3, 1.4, 1.5, 1.6, 1.6.1, 1.7, 1.7.1, 1.8", "type": "text", "format_type": "text", "value": ""}, {"required": false, "name": "instance_3_domains", "label": "Instance 3: Domains", "default_value": "", "placeholder": "", "help_string": "Enter your Checkpoint domains for the instance 3. You can specify several domains separated by a comma (,). Leave a blank if you don't have several domains.", "type": "text", "format_type": "text", "value": ""}, {"format_type": "text", "required": false, "name": "instance_3_whitelist_policies", "label": "Instance 3: Whitelist policies", "default_value": "", "help_string": "Indicates which policies, separated by a comma, are allowed to be accessed/changed. Other policies will not be impacted by changes", "internal_name": "", "type": "text", "value": ""}, {"required": false, "name": "instance_3_ssl_verify", "label": "Instance 3: SSL Verify", "default_value": true, "help_string": "Indicates if you want to verify the certificate validity for HTTPS. By default, it's set to True (certificate validation is enforced)", "type": "checkbox", "format_type": "checkbox", "value": true}]}}, "sourcetype_builder": {"checkpoint:management:api": {"metadata": {"event_count": 0, "data_input_name": "checkpoint_management_configuration", "extractions_count": 0, "cims_count": 0}}}}